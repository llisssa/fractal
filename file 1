import numpy as np
import holoviews as hv
from holoviews import opts
from numba import jit, prange

# Функция для расчета lambda для точки на комплексной плоскости
@jit(nopython=True)
def calculate_lambda(z, c, max_iter):
    """
    Рассчитывает значение lambda для точки на комплексной плоскости
    """
    n = 0
    while abs(z) < 2 and n < max_iter:
        z = z**3 + c
        n += 1
    if n == max_iter:
        return 0.0  # точка находится в множестве Жюлиа
    else:
        return n / max_iter  # точка не находится в множестве Жюлиа, возвращаем значение lambda

# Функция для расчета lambda на регулярной решетке на комплексной плоскости (распараллеленная версия)
@jit(nopython=True, parallel=True)
def calculate_lambda_grid(xmin, xmax, ymin, ymax, width, height, max_iter):
    """
    Рассчитывает значения lambda на регулярной решетке на комплексной плоскости
    """
    x_step = (xmax - xmin) / width
    y_step = (ymax - ymin) / height
    result = np.zeros((width, height))

    for i in prange(width):
        for j in prange(height):
            x = xmin + i * x_step
            y = ymin + j * y_step
            c = complex(x, y)
            result[i, j] = calculate_lambda(0, c, max_iter)

    return result

# Параметры карты
xmin, xmax = -2, 2
ymin, ymax = -2, 2
width, height = 800, 800
max_iter = 50

# Вычисление значений lambda на регулярной решетке
lambda_values = calculate_lambda_grid(xmin, xmax, ymin, ymax, width, height, max_iter)

# Создание карты с использованием Holoviews
hv.extension("bokeh")

# Определение DynamicMap
def julia_map(max_iter):
    # Вычисление значений lambda на регулярной решетке с новым числом итераций
    lambda_values = calculate_lambda_grid(xmin, xmax, ymin, ymax, width, height, max_iter)
    
    # Создание карты
    image = hv.Image(lambda_values, bounds=(xmin, ymin, xmax, ymax)).opts(
        cmap='viridis', width=width, height=height, colorbar=True,
        tools=['hover'], title=f'Julia Set with {max_iter} iterations', framewise=True)
    return image

# Создание DynamicMap
dmap = hv.DynamicMap(julia_map, kdims=['max_iter']).redim.values(max_iter=range(10, 101, 5))

# Отображение карты
dmap.opts(opts.Image(colorbar_position='bottom'))
